generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email       String  @unique
  phoneNumber String  @unique @map("phone_number")
  password    String?
  avatarUrl   String? @default("/uploads/placeholder.jpg") @map("avatar_url")

  isEmailVerified  Boolean          @default(false) @map("is_email_verified")
  isSubscribed     Boolean          @default(false) @map("is_subscribed")
  subscriptionType SubscriptionType @default(FREE) @map("subscription_type")
  rating           Float            @default(0)

  role     Role    @default(USER)
  isActive Boolean @default(true) @map("is_active")

  user           User?
  agency         Agency?
  SocialAccounts SocialAccount[]
  listings       Listing[]

  @@map("accounts")
}

model User {
  id       String @id @default(cuid())
  fullName String @map("full_name")

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @unique

  @@map("users")
}

model Agency {
  id String @id @default(cuid())

  name             String   @unique
  socialMediaLinks String[] @default([]) @map("social_media_links")
  bannerUrl        String?  @map("banner_url")
  address          String?
  website          String?  @unique

  agencyType         AgencyType         @map("agency_type")
  isVerified         Boolean            @default(false) @map("is_verified")
  verificationStatus VerificationStatus @default(PENDING) @map("verification_status")

  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String  @unique

  @@map("agencies")
}

model SocialAccount {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  provider   SocialProvider
  providerId String         @map("provider_id")
  account    Account        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  String

  @@unique([provider, providerId])
  @@map("social_accounts")
}

model CategoryGroup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  slug     String  @unique
  title_en String
  title_ru String
  title_hy String
  icon     String?

  categories Category[]

  @@map("category_groups")
}

model Category {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  slug           String @unique
  title_en       String
  title_hy       String
  title_ru       String
  description_en String
  description_hy String
  description_ru String

  group   CategoryGroup @relation(fields: [groupId], references: [id])
  groupId String

  listings Listing[]

  @@map("categories")
}

model Listing {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title          String
  description    String
  price          Float
  currency       String
  address        String
  imageUrls      String[]      @map("image_urls")
  area           Float
  buildingType   String        @map("building_type")
  status         ListingStatus @default(PENDING)
  priceHistory   Json?         @map("price_history")
  specificFields Json          @map("specific_fields")

  isFavorite Boolean @map("is_favorite")
  isTop      Boolean @map("is_top")

  location   Location  @relation(fields: [locationId], references: [id])
  locationId String
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  Account    Account?  @relation(fields: [accountId], references: [id])
  accountId  String?

  @@map("listings")
}

model Location {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  country String
  city    String

  listings Listing[]

  @@map("locations")
}

enum Role {
  USER
  AGENCY
  MODERATOR
  ADMIN
  SUPERADMIN
}

enum AgencyType {
  ONLINE
  OFFLINE
}

enum SubscriptionType {
  FREE
  PRO
  PARTNER
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SocialProvider {
  GOOGLE
  FACEBOOK
}
